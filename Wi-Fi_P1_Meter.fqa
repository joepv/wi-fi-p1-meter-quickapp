{"name":"Wi-Fi P1 Meter","type":"com.fibaro.deviceController","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_253"},"sections":{"items":[{"components":[{"name":"productLabel","style":{"weight":"1.2"},"text":"product_type","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"serialLabel","style":{"weight":"1.2"},"text":"serial","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"firmwareLabel","style":{"weight":"1.2"},"text":"firmware_version","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"modelLabel","style":{"weight":"1.2"},"text":"meter_model","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"smrLabel","style":{"weight":"1.2"},"text":"smr_version","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"},{"components":[{"name":"wifiLabel","style":{"weight":"1.2"},"text":"wifi_ssid","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_253"}}},"uiCallbacks":[],"quickAppVariables":[{"name":"IPv4","type":"string","value":"none"}],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":true,"content":"----------------------------------------------------------------------------------\n-- Wi-Fi P1 meter\n-- Version 1.0 (February 2022)\n-- Copyright (c)2022 Joep Verhaeg <info@joepverhaeg.nl>\n\n-- If you like using this Quick App you can buy me a coffee:\n-- https://www.buymeacoffee.com/joep\n\n-- Full documentation you can find at:\n-- https://docs.joepverhaeg.nl/homewizard-p1-meter\n----------------------------------------------------------------------------------\n-- DESCRIPTION:\n-- This Quick App reads the HomeWizard Wi-Fi P1 meter local API. It shows the \n-- energy meter readings and is optimized for the Energy Panel.\n\n-- QUICK SETUP:\n-- 1. Enable the LOCAL API in the HomeWizard Energy App under Settings -> Meters\n-- 2. Set the IPv4 QUICK APP VARIABLE to the IP address of the Wi-Fi P1 meter you\n--    want to read.\n----------------------------------------------------------------------------------\n\nclass 'TotalPowerImportT1'(QuickAppChild)\nfunction TotalPowerImportT1:__init(device)\n    -- You should not insert code before QuickAppChild.__init.\n    QuickAppChild.__init(self, device) \n    if fibaro.getValue(self.id, \"rateType\") ~= \"consumption\" then \n        self:updateProperty(\"rateType\", \"consumption\")\n        self:warning(\"Configured rateType interface of TotalPowerImportT1 child device (\" ..self.id ..\") to consumption\")\n    end\nend\n\nfunction TotalPowerImportT1:updateValue(data)\n    self:updateProperty(\"value\", data.total_power_import_t1_kwh) -- write in kWh!\n    self:updateProperty(\"unit\", \"kWh\")\n    self:updateProperty(\"log\", data.update_timestamp)\nend\n\nclass 'TotalPowerImportT2'(QuickAppChild)\nfunction TotalPowerImportT2:__init(device)\n    -- You should not insert code before QuickAppChild.__init.\n    QuickAppChild.__init(self, device) \n    if fibaro.getValue(self.id, \"rateType\") ~= \"consumption\" then \n        self:updateProperty(\"rateType\", \"consumption\")\n        self:warning(\" Configured interface of TotalPowerImportT2 child device (\" ..self.id ..\") to consumption\")\n    end\nend\n\nfunction TotalPowerImportT2:updateValue(data)\n    self:updateProperty(\"value\", data.total_power_import_t2_kwh) -- write in kWh!\n    self:updateProperty(\"unit\", \"kWh\")\n    self:updateProperty(\"log\", data.update_timestamp)\nend\n\nclass 'TotalPowerExportT1'(QuickAppChild)\nfunction TotalPowerExportT1:__init(device)\n    -- You should not insert code before QuickAppChild.__init.\n    QuickAppChild.__init(self, device) \n    if fibaro.getValue(self.id, \"rateType\") ~= \"production\" then \n        self:updateProperty(\"rateType\", \"production\")\n        self:warning(\"Configured rateType interface of TotalPowerExportT1 child device (\" ..self.id ..\") to production\")\n    end\n    -- Due a bug in the energy panel exclude the return device completely.\n    if fibaro.getValue(self.id, \"storeEnergyData\") ~= false then\n        self:updateProperty(\"storeEnergyData\", false)\n        self:warning(\"Configured storeEnergyData property of TotalPowerExportT1 child device (\" ..self.id ..\") to false\")\n    end\n    if fibaro.getValue(self.id, \"saveToEnergyPanel\") ~= false then\n        self:updateProperty(\"saveToEnergyPanel\", false)\n        self:warning(\"Configured saveToEnergyPanel property of TotalPowerExportT1 child device (\" ..self.id ..\") to false\")\n    end\nend\n\nfunction TotalPowerExportT1:updateValue(data)\n    self:updateProperty(\"value\", data.total_power_export_t1_kwh) -- write in kWh!\n    self:updateProperty(\"unit\", \"kWh\")\n    self:updateProperty(\"log\", data.update_timestamp)\nend\n\nclass 'TotalPowerExportT2'(QuickAppChild)\nfunction TotalPowerExportT2:__init(device)\n    -- You should not insert code before QuickAppChild.__init.\n    QuickAppChild.__init(self, device) \n    if fibaro.getValue(self.id, \"rateType\") ~= \"production\" then \n        self:updateProperty(\"rateType\", \"production\")\n        self:warning(\"Configured rateType interface of TotalPowerExportT2 child device (\" ..self.id ..\") to production\")\n    end\n    -- Due a bug in the energy panel exclude the return device completely.\n    if fibaro.getValue(self.id, \"storeEnergyData\") ~= false then\n        self:updateProperty(\"storeEnergyData\", false)\n        self:warning(\"Configured storeEnergyData property of TotalPowerExportT1 child device (\" ..self.id ..\") to false\")\n    end\n    if fibaro.getValue(self.id, \"saveToEnergyPanel\") ~= false then\n        self:updateProperty(\"saveToEnergyPanel\", false)\n        self:warning(\"Configured saveToEnergyPanel interface of TotalPowerExportT1 child device (\" ..self.id ..\") to false\")\n    end\nend\n\nfunction TotalPowerExportT2:updateValue(data)\n    self:updateProperty(\"value\", data.total_power_export_t2_kwh) -- write in kWh!\n    self:updateProperty(\"unit\", \"kWh\")\n    self:updateProperty(\"log\", data.update_timestamp)\nend\n\nclass 'ActivePower'(QuickAppChild)\nfunction ActivePower:__init(device)\n    -- You should not insert code before QuickAppChild.__init.\n    QuickAppChild.__init(self, device) \n    -- Check if RateType is needed!\nend\n\nfunction ActivePower:updateValue(data)\n    self:updateProperty(\"value\", data.active_power_w) -- write in Watt!\n    self:updateProperty(\"unit\", \"Watt\")\n    self:updateProperty(\"log\", data.update_timestamp)\nend\n\nclass 'ActivePowerL1'(QuickAppChild)\nfunction ActivePowerL1:__init(device)\n    -- You should not insert code before QuickAppChild.__init.\n    QuickAppChild.__init(self, device) \n    -- Check if RateType is needed!\nend\n\nfunction ActivePowerL1:updateValue(data)\n    self:updateProperty(\"value\", data.active_power_l1_w) -- write in Watt!\n    self:updateProperty(\"unit\", \"Watt\")\n    self:updateProperty(\"log\", data.update_timestamp)\nend\n\nclass 'ActivePowerL2'(QuickAppChild)\nfunction ActivePowerL2:__init(device)\n    -- You should not insert code before QuickAppChild.__init.\n    QuickAppChild.__init(self, device) \n    -- Check if RateType is needed!\nend\n\nfunction ActivePowerL2:updateValue(data)\n    self:updateProperty(\"value\", data.active_power_l2_w) -- write in Watt!\n    self:updateProperty(\"unit\", \"Watt\")\n    self:updateProperty(\"log\", data.update_timestamp)\nend\n\nclass 'ActivePowerL3'(QuickAppChild)\nfunction ActivePowerL3:__init(device)\n    -- You should not insert code before QuickAppChild.__init.\n    QuickAppChild.__init(self, device) \n    -- Check if RateType is needed!\nend\n\nfunction ActivePowerL3:updateValue(data)\n    self:updateProperty(\"value\", data.active_power_l3_w) -- write in Watt!\n    self:updateProperty(\"unit\", \"Watt\")\n    self:updateProperty(\"log\", data.update_timestamp)\nend\n\nclass 'TotalGas'(QuickAppChild)\nfunction TotalGas:__init(device)\n    -- You should not insert code before QuickAppChild.__init.\n    QuickAppChild.__init(self, device) \n    -- Check if RateType is needed!\nend\n\nfunction TotalGas:updateValue(data)\n    self:updateProperty(\"value\", data.total_gas_m3)\n    self:updateProperty(\"unit\", \"mÂ³\")\n    self:updateProperty(\"log\", data.gas_timestamp)\nend\n\nlocal function getChildVariable(child, varName)\n    for _,v in ipairs(child.properties.quickAppVariables or {}) do\n        if (v.name == varName) then \n            return v.value\n        end\n    end\n    return \"\"\nend\n\nfunction QuickApp:getDeviceInfo()\n    --mockdata = '{\"product_type\":\"HWE-P1\",\"product_name\":\"P1 Meter\",\"serial\":\"3c39e7aabbcc\",\"firmware_version\":\"2.11\",\"api_version\":\"v1\"}'\n    self.http:request('http://' .. self.ipaddr .. '/api', {\n            options = {\n                headers = { Accept = \"application/json\" },\n                method = 'GET'\n            },\n            success = function(response)\n                --self:debug(response.status)\n                --self:debug(response.data)\n                local deviceinfo = json.decode(response.data)\n                self:updateView(\"productLabel\", \"text\", deviceinfo['product_type'])\n                self:updateView(\"serialLabel\", \"text\", \"ID: \" .. deviceinfo['serial'])\n                self:updateView(\"firmwareLabel\", \"text\", \"Software: \" .. deviceinfo['firmware_version'])\n            end\n            ,\n            error = function(message)\n                self:debug(\"error:\", message)\n            end         \n        })\nend\n\nfunction QuickApp:updateMeterData()\n    self.http:request('http://' .. self.ipaddr .. '/api/v1/data', {\n            options = {\n                headers = { Accept = \"application/json\" },\n                method = 'GET'\n            },\n            success = function(response)\n                --self:debug(response.status)\n                --self:debug(response.data)\n                local meterdata = json.decode(response.data,{others = {null=false}})\n                local logtime   = os.date('%d-%m %H:%M:%S')\n                -- Check if gas time is not nill.\n                if (meterdata['gas_timestamp'] ~= nil) then\n                    gastime   = string.sub(meterdata['gas_timestamp'],5,6) .. \"-\" .. string.sub(meterdata['gas_timestamp'],3,4) .. \" \" .. string.sub(meterdata['gas_timestamp'],7,8) .. \":\" .. string.sub(meterdata['gas_timestamp'],9,10) .. \":\" .. string.sub(meterdata['gas_timestamp'],11,12)\n                else\n                    gastime = \"\"\n                end\n                \n                -- Write meter values to the QA variables at midnight to reset day values to zero.\n                if os.date(\"%H:%M\") == \"00:00\" then\n                    self:setVariable(\"daystart_power_import_t1_kwh\", meterdata['total_power_import_t1_kwh'])\n                    self:setVariable(\"daystart_power_import_t2_kwh\", meterdata['total_power_import_t2_kwh'])\n                    self:setVariable(\"daystart_power_export_t1_kwh\", meterdata['total_power_export_t1_kwh'])\n                    self:setVariable(\"daystart_power_export_t2_kwh\", meterdata['total_power_export_t2_kwh'])\n                    self:debug(\"It's midnight, reset day values to zero.\")\n                end\n\n                -- Update information in main device.\n                self:updateView(\"modelLabel\", \"text\", \"Meter type: \" .. meterdata['meter_model'])\n                self:updateView(\"smrLabel\", \"text\", \"SMR versie: \" .. string.format(\"%.1f\", tonumber(meterdata['smr_version'])/10))\n                self:updateView(\"wifiLabel\", \"text\", \"Wi-Fi: \" .. meterdata['wifi_ssid'] .. \" (\" .. meterdata['wifi_strength'] .. \" %)\")\n\n                -- Update the child devices.\n                local daystart_power_import_t1_kwh = tonumber(self:getVariable(\"daystart_power_import_t1_kwh\"))\n                local daystart_power_import_t2_kwh = tonumber(self:getVariable(\"daystart_power_import_t2_kwh\"))\n                local daystart_power_export_t1_kwh = tonumber(self:getVariable(\"daystart_power_export_t1_kwh\"))\n                local daystart_power_export_t2_kwh = tonumber(self:getVariable(\"daystart_power_export_t2_kwh\"))\n                \n                devicedata.total_power_import_t1_kwh = tonumber(meterdata['total_power_import_t1_kwh']) - daystart_power_import_t1_kwh\n                devicedata.total_power_import_t2_kwh = tonumber(meterdata['total_power_import_t2_kwh']) - daystart_power_import_t2_kwh\n                devicedata.total_power_export_t1_kwh = tonumber(meterdata['total_power_export_t1_kwh']) - daystart_power_export_t1_kwh\n                devicedata.total_power_export_t2_kwh = tonumber(meterdata['total_power_export_t2_kwh']) - daystart_power_export_t2_kwh\n                devicedata.active_power_w = tonumber(meterdata['active_power_w'])\n                devicedata.active_power_l1_w = tonumber(meterdata['active_power_l1_w'])\n                devicedata.active_power_l2_w = tonumber(meterdata['active_power_l2_w'])\n                devicedata.active_power_l3_w = tonumber(meterdata['active_power_l3_w'])\n                devicedata.total_gas_m3 = tonumber(meterdata['total_gas_m3'])\n                devicedata.gas_timestamp = gastime\n                devicedata.update_timestamp = logtime\n\n                --self:debug(json.encode(devicedata))\n\n                for id,child in pairs(self.childDevices) do \n                    child:updateValue(devicedata) \n                end\n            end\n            ,\n            error = function(message)\n                self:debug(\"Error:\", message)\n            end         \n    })\n\n    local timeout = 60000 - (os.date(\"%S\") * 1000)\n    fibaro.setTimeout(timeout, function() -- wait 1 minute\n            self:updateMeterData()\n        end)\n\nend\n\nfunction QuickApp:onInit()\n    self:debug(\"QuickApp: Wi-Fi P1 meter initialisation\")\n    self.childsInitialized = true\n    \n    self.ipaddr = self:getVariable(\"IPv4\")\n    self.http   = net.HTTPClient({ timeout = 5000 })\n    \n    if not api.get(\"/devices/\" .. self.id).enabled then\n        self:warning(\"The Wi-Fi P1 meter devices is disabled!\")\n        return\n    end\n    \n    if (self.ipaddr == \"none\") then\n        self:warning(\"Please set the IPv4 Quick App variable to the IP address of the Wi-Fi P1 Meter!\")\n        return\n    end\n\n    -- Get smart meter data to determine if 1 or 3 phases are connected.\n    self.http:request('http://' .. self.ipaddr .. '/api/v1/data', {\n            options = {\n                headers = { Accept = \"application/json\" },\n                method = 'GET'\n            },\n            success = function(response)\n                --self:debug(response.status)\n                --self:debug(response.data)\n                local meterdata = json.decode(response.data,{others = {null=false}})\n                \n                local cdevs = api.get(\"/devices?parentId=\"..self.id) or {}\n                if #cdevs == 0 then\n                    -- Child devices are not created yet, create them...\n                    initChildData = {\n                        {name=\"Verbruik vandaag (dal)\", className=\"TotalPowerImportT1\", type=\"com.fibaro.energyMeter\"},\n                        {name=\"Verbruik vandaag (normaal)\", className=\"TotalPowerImportT2\", type=\"com.fibaro.energyMeter\"},\n                        {name=\"Teruglevering vandaag (dal)\", className=\"TotalPowerExportT1\", type=\"com.fibaro.energyMeter\"},\n                        {name=\"Teruglevering vandaag (normaal)\", className=\"TotalPowerExportT2\", type=\"com.fibaro.energyMeter\"},\n                        {name=\"Actief vermogen\", className=\"ActivePower\", type=\"com.fibaro.powerMeter\"}\n                    }\n\n                    if (meterdata['active_power_l1_w'] ~= nil) then\n                        initChildData[#initChildData+1]={name=\"Fase 1\", className=\"ActivePowerL1\", type=\"com.fibaro.powerMeter\"}\n                    end\n                    if (meterdata['active_power_l2_w'] ~= nil) then\n                        initChildData[#initChildData+1]={name=\"Fase 2\", className=\"ActivePowerL2\", type=\"com.fibaro.powerMeter\"}\n                    end\n                    if (meterdata['active_power_l3_w'] ~= nil) then\n                        initChildData[#initChildData+1]={name=\"Fase 3\", className=\"ActivePowerL3\", type=\"com.fibaro.powerMeter\"}\n                    end\n                    if (meterdata['total_gas_m3'] ~= nil) then\n                        initChildData[#initChildData+1]={name=\"Gas\", className=\"TotalGas\", type=\"com.fibaro.gasMeter\"}\n                    end\n\n                    for _,c in ipairs(initChildData) do\n                        local child = self:createChildDevice(\n                            {\n                                name = c.name,\n                                type=c.type,\n                                initialProperties = {},\n                                initialInterfaces = {},\n                            },\n                            _G[c.className] -- Fetch class constructor from class name\n                        )\n                        child:setVariable(\"className\", c.className)  -- Save class name so we know when we load it next time.\n                        child.parent = self\n                        self:debug(\"Child device \" .. child.name .. \" created with id: \", child.id)\n                    end\n\n                    -- When the child devices are created, create the QA variables to calculate the day values.\n                    self:setVariable(\"daystart_power_import_t1_kwh\", meterdata['total_power_import_t1_kwh'])\n                    self:setVariable(\"daystart_power_import_t2_kwh\", meterdata['total_power_import_t2_kwh'])\n                    self:setVariable(\"daystart_power_export_t1_kwh\", meterdata['total_power_export_t1_kwh'])\n                    self:setVariable(\"daystart_power_export_t2_kwh\", meterdata['total_power_export_t2_kwh'])\n                else\n                    -- Ok, we already have children, instantiate them with the correct class\n                    -- This is more or less what self:initChildDevices does but this can handle \n                    -- mapping different classes to the same type...\n                    for _,child in ipairs(cdevs) do\n                        local className = getChildVariable(child,\"className\") -- Fetch child class name\n                        local childObject = _G[className](child) -- Create child object from the constructor name\n                        self.childDevices[child.id]=childObject\n                        childObject.parent = self -- Setup parent link to device controller\n                    end\n                end\n\n                -- Create a devicedata array\n                devicedata = {}\n                devicedata.total_power_import_t1_kwh = tonumber(meterdata['total_power_import_t1_kwh'])\n                devicedata.total_power_import_t2_kwh = tonumber(meterdata['total_power_import_t2_kwh'])\n                devicedata.total_power_export_t1_kwh = tonumber(meterdata['total_power_export_t1_kwh'])\n                devicedata.total_power_export_t2_kwh = tonumber(meterdata['total_power_export_t2_kwh'])\n                devicedata.active_power_w = tonumber(meterdata['active_power_w'])\n                devicedata.active_power_l1_w = tonumber(meterdata['active_power_l1_w'])\n                devicedata.active_power_l2_w = tonumber(meterdata['active_power_l2_w'])\n                devicedata.active_power_l3_w = tonumber(meterdata['active_power_l3_w'])\n                devicedata.total_gas_m3 = tonumber(meterdata['total_gas_m3'])\n                devicedata.gas_timestamp = \"\"\n                devicedata.update_timestamp = \"\"\n\n                self:getDeviceInfo()\n                self:updateMeterData()\n            end\n            ,\n            error = function(message)\n                self:debug(\"Error:\", message)\n            end \n        })\nend"}]}